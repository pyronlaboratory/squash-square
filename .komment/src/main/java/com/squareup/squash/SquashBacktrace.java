{"name":"SquashBacktrace.java","path":"src/main/java/com/squareup/squash/SquashBacktrace.java","content":{"structured":{"description":"A `SquashBacktrace` class and its subclasses for serializing backtraces and nested exceptions in Squash format. The `SquashBacktrace` class creates a list of `SquashException` objects representing the stack trace of an exception, while the `NestedException` class represents a nested exception with its own backtrace and ivars. The `populateNestedExceptions` method recursively adds nested exceptions to a list, while the `getBacktraces` and `getIvars` methods provide additional utility functions for working with stack traces and ivars.","items":[{"id":"3813f350-823f-289b-254b-e236def2cec0","ancestors":["ba9ae93f-0593-9db8-654a-25316146150f"],"type":"function","description":"takes a `Throwable` parameter and returns a list of `SquashException` objects representing the backtraces of the thrown exception, with each object containing the thread name, the true flag, and the stack trace array.","params":[{"name":"error","type_name":"Throwable","description":"Throwable object to be analyzed for backtraces.\n\n1. If `error` is null, then `null` is returned as output.\n2. Otherwise, an instance of `SquashException` is created with the name of the current thread and a boolean flag indicating whether it is a nested exception or not.\n3. The `getStacktraceArray` function is called on the `error` object to obtain an array of stack traces for the current thread. This array is then added to the instance of `SquashException`.","complex_type":true}],"returns":{"type_name":"ListSquashException","description":"a list of `SquashException` objects representing the backtraces of the Throwable argument.\n\n* The output is a `List` of `SquashException` objects.\n* Each `SquashException` object in the list represents an exception that occurred in a particular thread.\n* The `SquashException` objects contain information about the exception, including the thread name, the error message, and the stack trace.\n* The stack trace is represented as an array of `Throwable` objects, which provides information about the nesting of exceptions.","complex_type":true},"name":"getBacktraces","code":"public static List<SquashException> getBacktraces(Throwable error) {\n    if (error == null) {\n      return null;\n    }\n    final List<SquashException> threadList = new ArrayList<SquashException>();\n    final SquashException currentThread =\n        new SquashException(Thread.currentThread().getName(), true, getStacktraceArray(error));\n    threadList.add(currentThread);\n    return threadList;\n  }","location":{"start":31,"insert":31,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10,"docLength":null,"doc":"A `SquashBacktrace` class and its subclasses for serializing backtraces and nested exceptions in Squash format. The `SquashBacktrace` class creates a list of `SquashException` objects representing the stack trace of an exception, while the `NestedException` class represents a nested exception with its own backtrace and ivars. The `populateNestedExceptions` method recursively adds nested exceptions to a list, while the `getBacktraces` and `getIvars` methods provide additional utility functions for working with stack traces and ivars."},{"id":"0db27d21-3083-6aa7-fa44-1cfb71a0625e","ancestors":["ba9ae93f-0593-9db8-654a-25316146150f"],"type":"function","description":"generates a list of `StackElement` objects representing the elements of a stack trace associated with a `Throwable` object.","params":[{"name":"error","type_name":"Throwable","description":"Throwable object containing the stack trace information to be processed and returned as a list of StackElement objects.\n\n* `error`: This is a `Throwable` object that represents an exception or error in the code. It provides information about the error, such as its class name, file name, line number, and method name.\n* `StackTraceElement[]`: This is an array of objects that represent the stack trace elements of the error. Each element contains information about the location in the code where the error occurred.","complex_type":true}],"returns":{"type_name":"ArrayList","description":"a list of `StackElement` objects containing information about each stack trace element.\n\n* `List<StackElement>`: The output is a list of StackElement objects representing the stack trace elements.\n* `StackElement`: Each element in the list represents a stack frame, consisting of four attributes:\n\t+ `className`: The name of the class that defines the method being executed.\n\t+ `fileName`: The name of the file where the method is defined.\n\t+ `lineNumber`: The line number of the method definition within the file.\n\t+ `methodName`: The name of the method being executed.\n\nThe list contains elements representing each frame in the stack trace, starting from the innermost frame and proceeding outward to the outermost frame.","complex_type":true},"name":"getStacktraceArray","code":"private static List<StackElement> getStacktraceArray(Throwable error) {\n    List<StackElement> stackElems = new ArrayList<StackElement>();\n    for (StackTraceElement element : error.getStackTrace()) {\n      StackElement elementList =\n          new StackElement(element.getClassName(), element.getFileName(), element.getLineNumber(),\n              element.getMethodName());\n      stackElems.add(elementList);\n    }\n    return stackElems;\n  }","location":{"start":42,"insert":42,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10,"docLength":null,"doc":"A `SquashBacktrace` class and its subclasses for serializing backtraces and nested exceptions in Squash format. The `SquashBacktrace` class creates a list of `SquashException` objects representing the stack trace of an exception, while the `NestedException` class represents a nested exception with its own backtrace and ivars. The `populateNestedExceptions` method recursively adds nested exceptions to a list, while the `getBacktraces` and `getIvars` methods provide additional utility functions for working with stack traces and ivars."},{"id":"00b9a316-88a7-9ba2-864d-276f28893e91","ancestors":["ba9ae93f-0593-9db8-654a-25316146150f"],"type":"function","description":"returns a map of instance variables (ivars) of a given Throwable object, including non-static and non-mockito fields.","params":[{"name":"error","type_name":"Throwable","description":"Throwable object for which the IVARs are to be extracted.\n\n* `null`: The possible value of `error`, which indicates an absence of any error.\n* `Field[] fields`: An array of `Field` objects representing the fields of the deserialized `error`.\n* `Modifier.isStatic(field.getModifiers())`: A boolean value indicating whether the field is a static field or not. The function ignores static fields, as they are not relevant to the task at hand.\n* `!field.getName().startsWith(\"CGLIB\")`: Another boolean value indicating whether the field name starts with \"CGLIB\", which represents mockito stuff in tests. The function ignores these fields, as they are not part of the main function's functionality.\n* `field.isAccessible()`: A boolean value indicating whether the field is accessible or not. If the field is not accessible, it is made accessible before being accessed.\n* `Object val`: The value of the field.\n\nThese properties/attributes are used to create a map of field names and corresponding values, which represents the ivars (instance variables) of the `error` object.","complex_type":true}],"returns":{"type_name":"Map","description":"a map of class fields with their values for an provided `Throwable` error.\n\n* The output is a `Map` of `String` to `Object`, where each key is the name of a field in the `Throwable` class and each value is the value of that field in the `error` object.\n* The `Map` is created using a `HashMap` instance, which is initialized with the `null` value for the keys if the input `Throwable` is null.\n* The fields are identified using the `getClass().getDeclaredFields()` method, which returns an array of `Field` objects representing all the public and protected fields in the class, including static fields.\n* Each field is checked against a series of conditions before being included in the `Map`:\n\t+ It must not be static (ignored using `Modifier.isStatic(field.getModifiers())`).\n\t+ It must not start with \"CGLIB\" (ignored using a regular expression).\n\t+ It must have non-private access modifier (checked using `field.isAccessible()` and `field.setAccessible(true)` if necessary).\n* If any of the conditions are false, the field is added to the `Map` with its name as key and its value as value.\n* The `catch` block handles any exceptions that occur during field access using the `IllegalAccessException`. In this case, the field name is printed along with an exception message.\n\nIn summary, the `getIvars` function returns a `Map` of fields in the input `Throwable` object to their corresponding values, excluding static and mockito fields, and handles any exceptions that may occur during field access.","complex_type":true},"name":"getIvars","code":"public static Map<String, Object> getIvars(Throwable error) {\n    if (error == null) {\n      return null;\n    }\n    Map<String, Object> ivars = new HashMap<String, Object>();\n    final Field[] fields = error.getClass().getDeclaredFields();\n    for (Field field : fields) {\n      try {\n        if (!Modifier.isStatic(field.getModifiers()) // Ignore static fields.\n            && !field.getName().startsWith(\"CGLIB\")) { // Ignore mockito stuff in tests.\n          if (!field.isAccessible()) {\n            field.setAccessible(true);\n          }\n          Object val = field.get(error);\n          ivars.put(field.getName(), val);\n        }\n      } catch (IllegalAccessException e) {\n        ivars.put(field.getName(), \"Exception accessing field: \" + e);\n      }\n    }\n    return ivars;\n  }","location":{"start":53,"insert":53,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22,"docLength":null,"doc":"A `SquashBacktrace` class and its subclasses for serializing backtraces and nested exceptions in Squash format. The `SquashBacktrace` class creates a list of `SquashException` objects representing the stack trace of an exception, while the `NestedException` class represents a nested exception with its own backtrace and ivars. The `populateNestedExceptions` method recursively adds nested exceptions to a list, while the `getBacktraces` and `getIvars` methods provide additional utility functions for working with stack traces and ivars."}]}}}