{"name":"SquashEntry.java","path":"src/main/java/com/squareup/squash/SquashEntry.java","content":{"structured":{"description":"a `SquashEntry` class, which represents an exception to be tracked in Squash, a software replacement for Hoptoad. The class has fields for client information, log message, and other metadata related to the exception. It also has methods for creating backtraces and ivars. The code uses packages such as `java.text` and `java.util`. Overall, the code defines a structure for storing and manipulating exceptions in Squash.","items":[{"id":"bb400a10-5e68-4b89-a644-676c2a3ed38c","ancestors":[],"type":"function","description":"is a Java class used to represent an exception tracked by the Squash framework. It contains various fields and methods for gson serialization and testing purposes.","name":"SquashEntry","code":"@SuppressWarnings({ \"FieldCanBeLocal\", \"UnusedDeclaration\" })\npublic class SquashEntry {\n  private static final String DATE_RFC_2822 = \"EEE, dd MMM yyyy HH:mm:ss Z\";\n  private static final ThreadLocal<DateFormat> DATE_FORMAT_THREAD_LOCAL = new ThreadLocal<DateFormat>() {\n    @Override protected DateFormat initialValue() {\n      return new SimpleDateFormat(DATE_RFC_2822);\n    }\n  };\n\n  // Things that do not change per entry but should still be gson'd.\n  private final String client;\n\n  // Things that change per entry.\n  private final String api_key;\n  private final String environment;\n  private final String endpoint;\n  private final String user_id;\n  private final String version;\n  private final String revision;\n  private final String build;\n  private final String occurred_at;\n\n  // Used in tests.\n  final List<SquashBacktrace.SquashException> backtraces;\n  final Map<String, Object> ivars;\n  final List<SquashBacktrace.NestedException> parent_exceptions;\n  final String class_name;\n  final String message;\n  final String log_message;\n\n  public SquashEntry(String client, String apiKey, String logMessage, Throwable error,\n      String appVersion, int versionCode, String buildSha, String deviceId, String endpoint,\n      String userId, String environment) {\n    this.client = client;\n    this.log_message = logMessage;\n    this.version = appVersion;\n    this.revision = buildSha;\n    this.build = \"\" + versionCode;\n    this.environment = environment;\n    this.endpoint = endpoint;\n    this.backtraces = SquashBacktrace.getBacktraces(error);\n    this.parent_exceptions = new ArrayList<SquashBacktrace.NestedException>();\n    SquashBacktrace.populateNestedExceptions(parent_exceptions, error);\n    this.ivars = SquashBacktrace.getIvars(error);\n    this.class_name = error == null ? null : error.getClass().getName();\n    this.message = createMessage(error, logMessage);\n    this.api_key = apiKey;\n    this.user_id = userId;\n    this.occurred_at = DATE_FORMAT_THREAD_LOCAL.get().format(new Date());\n  }\n\n  // Squash requires a non-empty message field.\n  private static String createMessage(Throwable error, String logMessage) {\n    String message;\n    if (error != null && error.getMessage() != null) {\n      message = error.getMessage();\n    } else if (logMessage != null) {\n      message = logMessage;\n    } else {\n      message = \"No message\";\n    }\n    return message;\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":64,"docLength":null,"doc":"a `SquashEntry` class, which represents an exception to be tracked in Squash, a software replacement for Hoptoad. The class has fields for client information, log message, and other metadata related to the exception. It also has methods for creating backtraces and ivars. The code uses packages such as `java.text` and `java.util`. Overall, the code defines a structure for storing and manipulating exceptions in Squash."},{"id":"6eb6d7a7-4a5c-b4bc-2c48-ca9ada8eed3f","ancestors":["bb400a10-5e68-4b89-a644-676c2a3ed38c","f37e65c5-35c4-0d95-c749-895f7f882521"],"type":"function","description":"returns a `DateFormat` object initialized with the RFC 2822 format string.","params":[],"returns":{"type_name":"DateFormat","description":"a `DateFormat` instance initialized with the format string `DATE_RFC_2822`.\n\n* The SimpleDateFormat class is used to parse and format dates in the RFC 2822 format.\n* The `new SimpleDateFormat(DATE_RFC_2822)` method creates an instance of the `SimpleDateFormat` class with the format string set to \"RFC 2822\".\n* This function returns a new instance of `SimpleDateFormat`, which can be used to parse and format dates in RFC 2822 format.","complex_type":true},"usage":{"language":"java","code":"public class DateFormatExample {\n    public static void main(String[] args) {\n        // Get the thread local instance of date format\n        ThreadLocal<DateFormat> df = new ThreadLocal<>();\n        df.setInitialValue(() -> new SimpleDateFormat(DATE_RFC_2822));\n        \n        // Use the thread local instance to get a date format instance\n        DateFormat dateFormat = df.get();\n        \n        // Set the date format pattern\n        dateFormat.applyPattern(\"yyyy-MM-dd\");\n        \n        // Get the current date and time in the specified pattern\n        System.out.println(dateFormat.format(new Date()));\n    }\n}\n","description":""},"name":"initialValue","code":"@Override protected DateFormat initialValue() {\n      return new SimpleDateFormat(DATE_RFC_2822);\n    }","location":{"start":30,"insert":30,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"a `SquashEntry` class, which represents an exception to be tracked in Squash, a software replacement for Hoptoad. The class has fields for client information, log message, and other metadata related to the exception. It also has methods for creating backtraces and ivars. The code uses packages such as `java.text` and `java.util`. Overall, the code defines a structure for storing and manipulating exceptions in Squash."},{"id":"8b850dd6-d78c-12b4-1342-658cbdbe6b7d","ancestors":["bb400a10-5e68-4b89-a644-676c2a3ed38c"],"type":"function","description":"generates a string message based on a provided `Throwable` error object and a log message. If both are null, it returns a default message. Otherwise, it combines the error message with the log message.","params":[{"name":"error","type_name":"Throwable","description":"error object that contains the detailed information about the error, which is used to create the final message returned by the function.\n\n1. If `error` is not null and `error.getMessage()` is not null, then `error.getMessage()` is returned as the message.\n2. If `logMessage` is not null, then `logMessage` is returned as the message.\n3. If neither `error` nor `logMessage` are null, then a default message \"No message\" is returned.","complex_type":true},{"name":"logMessage","type_name":"String","description":"2nd string argument passed to the function, which if provided, will be used as the alternative message to display if the error parameter is null or has no message.","complex_type":false}],"returns":{"type_name":"String","description":"a string representation of an error message, log message or a default message if neither is provided.","complex_type":false},"name":"createMessage","code":"private static String createMessage(Throwable error, String logMessage) {\n    String message;\n    if (error != null && error.getMessage() != null) {\n      message = error.getMessage();\n    } else if (logMessage != null) {\n      message = logMessage;\n    } else {\n      message = \"No message\";\n    }\n    return message;\n  }","location":{"start":78,"insert":78,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11,"docLength":null,"doc":"a `SquashEntry` class, which represents an exception to be tracked in Squash, a software replacement for Hoptoad. The class has fields for client information, log message, and other metadata related to the exception. It also has methods for creating backtraces and ivars. The code uses packages such as `java.text` and `java.util`. Overall, the code defines a structure for storing and manipulating exceptions in Squash."}]}}}